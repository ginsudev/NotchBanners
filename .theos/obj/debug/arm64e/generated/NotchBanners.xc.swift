// ###
// # AUTOGENERATED ORION GLUE FILE. DO NOT EDIT.
// ###

// orion:disable
// swiftlint:disable all

import Foundation
import NotchBannersC
import Orion

extension SBNotificationBannerDestination_Hook {
    enum _Glue: _GlueClassHook {
        typealias HookType = SBNotificationBannerDestination_Hook

        final class OrigType: SBNotificationBannerDestination_Hook, _GlueClassHookTrampoline {
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 32)
            @objc override func postNotificationRequest(_ arg1: AnyObject?)  {
            #sourceLocation()
                _Glue.orion_orig1(target, _Glue.orion_sel1, arg1)
            }
        }

        final class SuprType: SBNotificationBannerDestination_Hook, _GlueClassHookTrampoline {
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 32)
            @objc override func postNotificationRequest(_ arg1: AnyObject?)  {
            #sourceLocation()
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 32)
                callSuper((@convention(c) (UnsafeRawPointer, Selector, AnyObject?) -> Void).self) {
            #sourceLocation()
                    $0($1, _Glue.orion_sel1, arg1)
                }
            }
        }

        static let storage = initializeStorage()

        #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 32)
        private static let orion_sel1 = #selector(SBNotificationBannerDestination_Hook.postNotificationRequest(_:) as (SBNotificationBannerDestination_Hook) -> (AnyObject?) -> Void)
        #sourceLocation()
        #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 32)
        private static var orion_orig1: @convention(c) (Target, Selector, AnyObject?) -> Void = { target, _cmd, arg1 in
        #sourceLocation()
            (SBNotificationBannerDestination_Hook(target: target).postNotificationRequest(_:)(arg1))
        }
    
        static func activate(withClassHookBuilder builder: inout _GlueClassHookBuilder) {
            builder.addHook(orion_sel1, orion_orig1, isClassMethod: false) { orion_orig1 = $0 }
        }
    }
}

extension DNDNotificationsService_Hook {
    enum _Glue: _GlueClassHook {
        typealias HookType = DNDNotificationsService_Hook

        final class OrigType: DNDNotificationsService_Hook, _GlueClassHookTrampoline {
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 96)
            @objc override func stateService(_ arg1: AnyObject, didReceiveDoNotDisturbStateUpdate arg2: DNDStateUpdate)  {
            #sourceLocation()
                _Glue.orion_orig1(target, _Glue.orion_sel1, arg1, arg2)
            }
        }

        final class SuprType: DNDNotificationsService_Hook, _GlueClassHookTrampoline {
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 96)
            @objc override func stateService(_ arg1: AnyObject, didReceiveDoNotDisturbStateUpdate arg2: DNDStateUpdate)  {
            #sourceLocation()
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 96)
                callSuper((@convention(c) (UnsafeRawPointer, Selector, AnyObject, DNDStateUpdate) -> Void).self) {
            #sourceLocation()
                    $0($1, _Glue.orion_sel1, arg1, arg2)
                }
            }
        }

        static let storage = initializeStorage()

        #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 96)
        private static let orion_sel1 = #selector(DNDNotificationsService_Hook.stateService(_:didReceiveDoNotDisturbStateUpdate:) as (DNDNotificationsService_Hook) -> (AnyObject, DNDStateUpdate) -> Void)
        #sourceLocation()
        #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 96)
        private static var orion_orig1: @convention(c) (Target, Selector, AnyObject, DNDStateUpdate) -> Void = { target, _cmd, arg1, arg2 in
        #sourceLocation()
            (DNDNotificationsService_Hook(target: target).stateService(_:didReceiveDoNotDisturbStateUpdate:)(arg1, arg2))
        }
    
        static func activate(withClassHookBuilder builder: inout _GlueClassHookBuilder) {
            builder.addHook(orion_sel1, orion_orig1, isClassMethod: false) { orion_orig1 = $0 }
        }
    }
}

extension SBLockStateAggregator_Hook {
    enum _Glue: _GlueClassHook {
        typealias HookType = SBLockStateAggregator_Hook

        final class OrigType: SBLockStateAggregator_Hook, _GlueClassHookTrampoline {
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 106)
            @objc override func _updateLockState()  {
            #sourceLocation()
                _Glue.orion_orig1(target, _Glue.orion_sel1)
            }
        }

        final class SuprType: SBLockStateAggregator_Hook, _GlueClassHookTrampoline {
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 106)
            @objc override func _updateLockState()  {
            #sourceLocation()
            #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 106)
                callSuper((@convention(c) (UnsafeRawPointer, Selector) -> Void).self) {
            #sourceLocation()
                    $0($1, _Glue.orion_sel1)
                }
            }
        }

        static let storage = initializeStorage()

        #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 106)
        private static let orion_sel1 = #selector(SBLockStateAggregator_Hook._updateLockState as (SBLockStateAggregator_Hook) -> () -> Void)
        #sourceLocation()
        #sourceLocation(file: "Sources/NotchBanners/Tweak.x.swift", line: 106)
        private static var orion_orig1: @convention(c) (Target, Selector) -> Void = { target, _cmd in
        #sourceLocation()
            (SBLockStateAggregator_Hook(target: target)._updateLockState())
        }
    
        static func activate(withClassHookBuilder builder: inout _GlueClassHookBuilder) {
            builder.addHook(orion_sel1, orion_orig1, isClassMethod: false) { orion_orig1 = $0 }
        }
    }
}

#if canImport(OrionBackend_Substrate)
import OrionBackend_Substrate
#endif

@_cdecl("orion_init")
func orion_init() {
    var hooks: [_GlueAnyHook.Type]
    hooks = []
    if true {
        hooks += [
            SBNotificationBannerDestination_Hook._Glue.self,
            DNDNotificationsService_Hook._Glue.self,
            SBLockStateAggregator_Hook._Glue.self
        ]
    }
    NotchBanners._activate(
        backend: Backends.Substrate(),
        hooks: hooks
    )
}
